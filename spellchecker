#!/usr/bin/python3
"""
Spellchecker

URI: http://www.w3.org/2002/01/spellchecker
Maintainer: dom@w3.org

See also a version that features recursive checking:
http://www.w3.org/mid/1ce6d0230912160806x1ee6f25dgafc73865140b239e@mail.gmail.com

Share and Enjoy. Open Source license:
Copyright (c) 2001-20019 W3C (MIT, ERCIM, Keio)
http://www.w3.org/Consortium/Legal/2002/copyright-software-20021231
$Id$
 branched from v 1.46
"""

import http_auth
import os
import sys
import urllib.parse
import urllib.error

from cleanhtml import *
from subprocess import Popen, PIPE, DEVNULL

languages = {"en_US":"English","fr":"French"}

def format_option(a,b,c):
    if a:
        selected=""
        if a==c:
            selected=" selected='selected'"
        return clean_format("<option value='%s'%s>%s</option>",
                            a, selected, b)

Page1 ="""Content-Type:text/html; charset=utf-8


<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8">
  %s
  <title>W3C Spell Checker %s</title>
  <link rel="stylesheet" href="http://www.w3.org/Stylesheets/base"/>
  <link rel="stylesheet" href="http://www.w3.org/2001/11/results"/>
  <style type="text/css">
   ul.suggestions { height:5em; overflow:auto; width:10em;}

  </style>
</head>

<body>
<p><a href="http://www.w3.org"><img src="http://www.w3.org/Icons/w3c_home" alt="W3C"/></a></p>

<h1>W3C Spell Checker %s</h1>

<h2>Status</h2>
<p>This tool allows you to check the spelling of a web page. It currently only supports English and French.</p>

<h2>Usage</h2>
<form action="" method="get"><p><label>URI of the document to be checked:<input type="text" value="%s" name="uri"/></label><br />
<label>Language of the document: <select name="lang">%s</select><br />
<label>Presents possible corrections: <input type="checkbox" name="suggest"%s /></label><br />
<input type="submit" value="Get results"/></p></form>
"""

Page2 = """
<h2>See also</h2>
<ul>
<li><a href="http://www.w3.org/QA/Tools">the QA Toolbox</a></li>
</ul>

<h2>References</h2>
<ul>
<li><a href="http://aspell.sourceforge.net">Aspell</a> is used in the back-end</li>
<li>The front-end is coded in <a href="http://www.python.org">Python</a></li>
</ul>
<h2>Known bugs and limitations</h2>
<ul>
<li>Doesn't handle language switching on the <code>lang</code> and <code>xml:lang</code> attributes</li>
<li>Doesn't check textual attributes (e.g. <code>title</code>, <code>alt</code>)</li>
</ul>
<hr/>
<address><a href="http://www.w3.org/People/Dom/">Dominique Haza&euml;l-Massieux</a><br/>
Last Modified: $Date$
</address>
</body>
</html>
"""

def format(fp,suggest):
    words = {}
    # convert fp from bytes to string and split into lines
    for line in fp.decode("utf-8").split('\n'):
        line = line.rstrip('\n')
        if line and line != "*" and line[0] != "@":
            parts = line.split(': ')
            fields = parts[0].split()
            if fields[1] in words:
                continue
            elif fields[0]=="&":
                words[fields[1]] = parts[1].split(", ")
            elif fields[0]=="#":
                words[fields[1]] = []
    if not words:
        print("<p><span class='yes'>No errors</span> found.</p>")
        return
    print("<ol>")
    for error in sorted(words):
        clean_print("<li>\"<span class='no'>%s</span>\"", error)
        if words[error] and suggest:
            print("; suggestions:<ul class='suggestions'>")
            for option in words[error]:
                clean_print("<li>%s</li>", option)
            print("</ul>")
        print("</li>")
    print("</ol>")

def _getfirst(fields, key, default=None):
    """ Return the first value received."""
    if key in fields:
        return fields[key]
    else:
        return default

def getLangSetup(fields):
    lang = _getfirst(fields, 'lang')
    if lang not in languages:
        lang = 'en_US'
    lang_opts = ''.join(format_option(code, languages[code], lang)
                        for code in languages)
    return lang, lang_opts

def getSuggestSetup(fields):
    if _getfirst(fields, 'suggest') == 'on':
        return True, " checked='checked'"
    return False, ""

def getURI(fields):
    uri = _getfirst(fields, 'uri')
    if (not uri) and ('referrer' in fields):
        uri = os.environ.get('HTTP_REFERER')
    return uri

def escapeURLQueryString(url=None):
    if url is None:
        return None

    url_split = urllib.parse.urlsplit(url)

    if url_split.query:
        fields = dict(urllib.parse.parse_qsl(url_split.query))
        escaped_qs = urllib.parse.urlencode(fields)
        url_split = url_split._replace(query=escaped_qs)
        rv = urllib.parse.urlunsplit(url_split)
    else:
        rv = url

    return rv

if __name__ == '__main__':
    fields = dict(urllib.parse.parse_qsl(os.getenv('QUERY_STRING', [])))
    lang, languages_options = getLangSetup(fields)
    suggest, suggest_txt = getSuggestSetup(fields)
    uri = getURI(fields)
    if not uri:
        print(Page1 % ('', '', '', clean_str(uri), languages_options,
                       suggest_txt))
        print(Page2)
        sys.exit()

    uri_text1 = clean_format("for %s", uri)
    uri_text = clean_format(" for <a href=\"%s\">%s</a>", uri, uri)
    print(Page1 % ('<meta name="ROBOTS" content="NOINDEX,NOFOLLOW"/>',
                   uri_text1, uri_text, clean_str(uri), languages_options,
                   suggest_txt))

    url_opener = http_auth.ProtectedURLopener()
    try:
        uri = escapeURLQueryString(uri)
        fp = url_opener.open(uri)
    except urllib.error.HTTPError as error:
        url_opener.error = f"HTTP Error: {error.code} {error.reason}"
        fp = None
    except urllib.error.URLError as error:
        url_opener.error = f"URL error: {str(error.reason)}"
        fp = None
    except ValueError as error:
        url_opener.error = f"URL error: {str(error)}"
        fp = None
    except OSError as error:
        url_opener.error = f"I/O error: {error.errno} {error.strerror}"
        fp = None

    if fp is None:
        clean_print("<p><span class='no'>Unable to read</span> <a href='%s'>%s</a> (%s). Sorry, check the URI.</p>", uri, uri, url_opener.error)
        print(Page2)
        sys.exit()

    headers = fp.info()
    inp = fp.read()

    lynx_cmd = ['/usr/bin/lynx', '-cfg=/usr/local/lib/lynx.cfg', '-nolist',
                '-dump', '-stdin']

    if 'Content-Type' in headers:
        charset = headers.get_content_charset()
        if charset:
            lynx_cmd.append('-assume_charset={}'.format(charset.lower()))

    lynx_proc = Popen(lynx_cmd, stdin=PIPE, stdout=PIPE)

    aspell_command = ['/usr/bin/aspell', '-a', '--encoding=utf-8',
                      '--sug-mode=fast', '--save-repl=false', '--lang', lang]

    # aspell outputs invalid word formats to stderr, such as:
    # Error: The word "(datadef|datastruct|extension)" is invalid.
    # The character '(' (U+28) may not appear at the beginning of a word.
    # as long as spellchecker doesn't display them we'll redirect
    # them to DEVNULL
    aspell_proc = Popen(aspell_command,
                        stdin=lynx_proc.stdout, stdout=PIPE, stderr=DEVNULL)

    lynx_proc.stdin.write(inp)
    lynx_proc.stdin.flush()
    lynx_proc.stdin.close()

    print("<h2>Errors found in the page</h2>")
    format(aspell_proc.stdout.read(), suggest)
    aspell_proc.stdout.close()
    aspell_proc.wait()
    print(Page2)
